import { Piece, PieceData, PieceColor } from "piece.slint";

export component Board {
    in property <color> black-color: #121212;
    in property <color> white-color: #FFFFFF;
    in property <color> border-color: #000000;

    in property <length> board-length;
    in property <{x: length, y: length}> center;

    in-out property <[PieceData]> pieces: [
        { index: 3, color: PieceColor.Black, is-king: false },
        { index: 5, color: PieceColor.Black, is-king: false },
    ];
    in-out property <int> last-pressed: 0;

    property <length> length-no-border: board-length * 96%;
    property <length> length-border: board-length - length-no-border;

    callback square-clicked(int, int);

    x: center.x - board-length / 2;
    y: center.y - board-length / 2;

    width: board-length;
    height: board-length;

    // Background
    Rectangle {
        background: white-color;
        x: parent.width * 2%;
        y: parent.height* 2%;

        width: length-no-border;
        height: length-no-border;

        border-radius: length-border * 75%;
    }

    // Border
    Rectangle {
        background: border-color;
        border-radius: length-border;

        z: -2;
    }

    property <length> square-size: length-no-border * 12.5%;

    pure function calcSquareX(index: int) -> length {
        mod(index, 4)
            * length-no-border * 25%
            + length-no-border * (mod(index, 8) < 4 ? 0% : 12.5%)
            + length-border / 2
    }

    pure function calcSquareY(index: int) -> length {
        floor(index / 4) * (length-no-border * 12.5%) + length-border / 2
    }

    for index in 32 : Rectangle {
        x: calcSquareX(index);
        y: calcSquareY(index);

	width: square-size;
	height: square-size;

	background: black-color;

	TouchArea {
	    clicked => {
		square-clicked(index, last-pressed);
                last-pressed = index;
	    }
	}
    }

    for piece in pieces : Piece {
        data: piece;
        radius: square-size / 2 - 5px;
        pos: {
            x: calcSquareX(piece.index) + square-size / 2,
            y: calcSquareY(piece.index) + square-size / 2
        };
    }
}
